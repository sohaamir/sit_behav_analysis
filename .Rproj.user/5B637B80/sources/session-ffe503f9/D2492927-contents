---
title: "behav_plotting"
author: "Aamir Sohail"
date: "2025-01-08"
output: html_document
---

# Description of this script

This script runs the linear mixed-effects models as part of the behavioural analysis for the entire group. It runs and plots the equivalent of Fig 1D-I and Supp Fig 2A-C from Zhang & Glascher.

## Set-up and installation

```{r setup, include=FALSE, message=FALSE, cache=TRUE}
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "here", "MuMIn", "conflicted")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
  install.packages(install_if_missing, quietly = TRUE)
}

# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(here)
library(MuMIn)
library(conflicted)

conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
```


REMOVE COMPUTER RESPONSE TRIALS BEFOREHAND!
```
# Something like this:

# Read in the data
df <- read_csv("merged_test_data.csv")

# Print initial number of trials
print(paste("Initial number of trials:", nrow(df)))

# Remove trials with computer choices
df_cleaned <- df %>%
  filter(is.na(player.chosen_image_computer) & is.na(player.chosen_image_computer_two))

# Print final number of trials
print(paste("Number of trials after removal:", nrow(df_cleaned)))

# Save cleaned dataset
write_csv(df_cleaned, "merged_test_data_cleaned.csv")
```

Create choice switch across trials column (only needs to be ran once)
```
# Read and process data
df <- read_csv(here("data", "preprocessed", "merged_test_data.csv"), show_col_types = FALSE)

# Create the switch across trials column and position it after player.switch_vs_stay
df <- df %>%
  group_by(participant.id_in_session) %>%
  arrange(subsession.round_number) %>%
  mutate(
    choice_switch_across_trials = ifelse(
      subsession.round_number == 1,
      NA,
      ifelse(player.chosen_image_one_binary != lag(player.chosen_image_two_binary), 1, 0)
    )
  ) %>%
  ungroup() %>%
  relocate(choice_switch_across_trials, .after = player.switch_vs_stay)

# Save the updated data
write.csv(df, here("data", "preprocessed", "merged_test_data.csv"), row.names = FALSE)
```


## Choice accuracy and bet magnitude

Plot average choice accuracy and bet magnitude (Figs 1F and 1G)

```{r}
# Read data
data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"))

# Create output directory
dir.create(here("output", "behav", "group"), recursive = TRUE, showWarnings = FALSE)

# Perform tests and prepare data
choice_ttest <- t.test(data$player.choice2_accuracy * 100, 
                      data$player.choice1_accuracy * 100, 
                      paired = TRUE)
bet_ttest <- t.test(data$player.bet2, 
                    data$player.bet1, 
                    paired = TRUE)

choice_data <- data %>%
  reframe(
    value = c(mean(player.choice1_accuracy) * 100, mean(player.choice2_accuracy) * 100),
    se = c(sd(player.choice1_accuracy) * 100, sd(player.choice2_accuracy) * 100) / sqrt(n()),
    group = factor(c("Choice 1", "Choice 2"))
  )

bet_data <- data %>%
  reframe(
    value = c(mean(player.bet1), mean(player.bet2)),
    se = c(sd(player.bet1), sd(player.bet2)) / sqrt(n()),
    group = factor(c("Bet 1", "Bet 2"))
  )

# Function to format test results
format_test_results <- function(test_results, data, type) {
  paste0(
    toupper(type), " ANALYSIS\n",
    "==============\n\n",
    "Run on: ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n\n",
    "T-TEST RESULTS\n",
    "=============\n",
    sprintf("t = %.3f\n", test_results$statistic),
    sprintf("df = %d\n", test_results$parameter),
    sprintf("p = %.3e\n", test_results$p.value),
    sprintf("95%% CI [%.3f, %.3f]\n\n", test_results$conf.int[1], test_results$conf.int[2]),
    "DESCRIPTIVE STATISTICS\n",
    "=====================\n",
    sprintf("%s 1: %.2f (SE = %.2f)\n", type, data$value[1], data$se[1]),
    sprintf("%s 2: %.2f (SE = %.2f)", type, data$value[2], data$se[2])
  )
}

# Write results
writeLines(
  format_test_results(choice_ttest, choice_data, "Choice"),
  here("output", "behav", "group", "choice_accuracy_difference.txt")
)

writeLines(
  format_test_results(bet_ttest, bet_data, "Bet"),
  here("output", "behav", "group", "bet_magnitude_difference.txt")
)

# Create plots
plots <- list(
  choice = ggplot(choice_data, aes(x = group, y = value)) +
    geom_bar(stat = "identity", width = 0.2, fill = c("#69b3e7", "#1f77b4")) +
    geom_errorbar(aes(ymin = value - se, ymax = value + se), width = 0.07) +
    scale_y_continuous(expand = c(0, 0)) +
    annotate("text", x = 1.5, y = max(choice_data$value + choice_data$se) - 2,
             label = sprintf("P = %.2e", choice_ttest$p.value)) +
    ylab("Choice accuracy (%)") +
    theme_classic() +
    theme(axis.title.x = element_blank()),
    
  bet = ggplot(bet_data, aes(x = group, y = value)) +
    geom_bar(stat = "identity", width = 0.2, fill = c("#98cb85", "#2ca02c")) +
    geom_errorbar(aes(ymin = value - se, ymax = value + se), width = 0.07) +
    scale_y_continuous(expand = c(0, 0)) +
    annotate("text", x = 1.5, y = max(bet_data$value + bet_data$se) - 0.2,
             label = sprintf("P = %.4f", bet_ttest$p.value)) +
    ylab("Bet magnitude") +
    theme_classic() +
    theme(axis.title.x = element_blank())
)

# Print plots
print(plots$choice)
print(plots$bet)
```


## Choice switch probability and bet difference by group consensus

Run linear-mixed effect models for choice switch probability and bet difference by group consensus, and then plot the winning model (Figs 1D-1E)
```{r consensus_analysis}
source(here("R", "mixed_models_group.R"))

################## SPECIFIC PREPROCESSING ###################
process_consensus_data <- function(data, outcome_type) {
  processed <- if(outcome_type == "switch") {
    data %>%
      group_by(participant.id_in_session, 
               consensus = player.choice1_with, 
               gender) %>%
      summarise(
        outcome_value = mean(player.switch_vs_stay) * 100,
        .groups = 'drop'
      )
  } else {
    data %>%
      mutate(bet_difference = player.bet2 - player.bet1) %>%
      group_by(participant.id_in_session,
               consensus = player.choice1_with,
               gender) %>%
      summarise(
        outcome_value = mean(bet_difference),
        .groups = 'drop'
      )
  }
  
  processed %>%
    left_join(
      data %>%
        group_by(participant.id_in_session) %>%
        slice(1) %>%
        select(participant.id_in_session, age),
      by = "participant.id_in_session"
    ) %>%
    mutate(
      direction = if_else(consensus >= 0.5, "With group", "Against group"),
      consensus_numeric = case_when(
        consensus %in% c(0, 1) ~ 2,
        consensus %in% c(0.25, 0.75) ~ 1,
        consensus == 0.5 ~ 0
      ),
      gender = factor(gender),
      age = scale(age)[,1]
    )
}

################## SPECIFIC MODEL FORMULAS ###################
consensus_model_formulas <- list(
  m1 = outcome_value ~ direction * consensus_numeric + age + 
         (1|participant.id_in_session),
  
  m2 = outcome_value ~ direction * consensus_numeric + age + 
         (1|participant.id_in_session) + (1|gender),
  
  m3 = outcome_value ~ direction * consensus_numeric + age + 
         (1|participant.id_in_session) + (1|gender) + 
         (1|direction:participant.id_in_session),
  
  m4 = outcome_value ~ direction * consensus_numeric + age + 
         (1|participant.id_in_session) + (1|gender) + 
         (1|consensus_numeric:participant.id_in_session),
  
  m5 = outcome_value ~ direction * consensus_numeric + age + 
         (1|participant.id_in_session) + (1|gender) + 
         (1|direction:participant.id_in_session) + 
         (1|consensus_numeric:participant.id_in_session)
)

################## SPECIFIC PLOTTING FUNCTION ###################
create_consensus_plot <- function(data, model_results, anova_results, params) {
  interaction_p <- anova_results["direction:consensus_numeric", "Pr(>Chisq)"]
  
  plot_data <- data %>%
    mutate(
      consensus_level = case_when(
        consensus_numeric == 0 ~ "2:2",
        consensus_numeric == 1 ~ "3:1",
        consensus_numeric == 2 ~ "4:0"
      ),
      consensus_level = factor(consensus_level, levels = c("2:2", "3:1", "4:0"))
    ) %>%
    group_by(consensus_level, direction) %>%
    summarise(
      mean_outcome = mean(outcome_value),
      se = sd(outcome_value) / sqrt(n()),
      .groups = 'drop'
    )

  ggplot(plot_data, 
         aes(x = consensus_level, 
             y = mean_outcome, 
             color = direction,
             group = direction)) +
    geom_line(linewidth = 1) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = mean_outcome - se, 
                      ymax = mean_outcome + se), 
                  width = 0.2,
                  linewidth = 1) +
    geom_ribbon(aes(ymin = mean_outcome - se, 
                    ymax = mean_outcome + se,
                    fill = direction), 
                alpha = 0.2,
                color = NA) +
    scale_color_manual(values = c("Against group" = "red", "With group" = "blue"),
                      name = NULL) +
    scale_fill_manual(values = c("Against group" = "red", "With group" = "blue"),
                      name = NULL) +
    labs(x = "Group consensus",
         y = params$y_label) +
    theme_custom +
    theme(legend.position = "right") +
    annotate("text",
             x = 1.5,
             y = max(plot_data$mean_outcome + plot_data$se) + params$y_offset,
             label = sprintf("Interaction: p = %.3f", interaction_p),
             size = 3)
}

################## RUN ANALYSES ###################
# Read data
data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"), 
                 show_col_types = FALSE)

# Run switch analysis
switch_results <- run_mixed_model_pipeline(
  data = data,
  preprocessing_function = function(x) process_consensus_data(x, "switch"),
  model_formulas = consensus_model_formulas,
  plot_function = create_consensus_plot,
  analysis_name = "Choice Switch by Group Consensus",
  output_path = here("output", "behav", "group", 
                    "choice_switching_by_group_consensus.txt"),
  additional_params = list(
    emmeans_specs = c("direction", "consensus_numeric"),
    y_label = "Choice switch probability (%)",
    y_offset = 5
  )
)

# Run bet difference analysis
bet_results <- run_mixed_model_pipeline(
  data = data,
  preprocessing_function = function(x) process_consensus_data(x, "bet"),
  model_formulas = consensus_model_formulas,
  plot_function = create_consensus_plot,
  analysis_name = "Bet Difference by Group Consensus",
  output_path = here("output", "behav", "group", 
                    "bet_difference_by_group_consensus.txt"),
  additional_params = list(
    emmeans_specs = c("direction", "consensus_numeric"),
    y_label = "Bet difference (Bet 2 - Bet 1)",
    y_offset = 0.5
  )
)
```

## Choice accuracy and bet magnitude and switching across trials/group consensus

Plot Choice 1 accuracy and Bet 1 magnitude as a function of switch difference across trials (Choice 2 - Choice 1) and group consensus (Figs 1H-1I)

```{r}
source(here("R", "mixed_models_group.R"))

################## SPECIFIC PREPROCESSING ###################
process_switch_accuracy_data <- function(data, outcome_type) {
  # Create separate dataframes for With and Against groups
  df_with <- data %>%
    mutate(direction = "With group") %>%
    filter(player.choice1_with > 0.5)
  
  df_against <- data %>%
    mutate(direction = "Against group") %>%
    filter(player.choice1_with <= 0.5)
  
  # Combine and prepare data
  bind_rows(df_with, df_against) %>%
    filter(!is.na(choice_switch_across_trials)) %>%
    mutate(
      consensus_numeric = case_when(
        player.choice1_with %in% c(0, 1) ~ 2,
        player.choice1_with %in% c(0.25, 0.75) ~ 1,
        player.choice1_with == 0.5 ~ 0
      ),
      direction = factor(direction),
      gender = factor(gender),
      choice_switch_across_trials = factor(choice_switch_across_trials),
      participant.id_in_session = factor(participant.id_in_session)
    )
}

################## SPECIFIC MODEL FORMULAS ###################
get_switch_accuracy_formulas <- function(outcome_var) {
  formula_base <- as.formula(paste(
    outcome_var,
    "~ direction * consensus_numeric * choice_switch_across_trials"
  ))
  
  list(
    m1 = update(formula_base, . ~ . + (1|participant.id_in_session)),
    
    m2 = update(formula_base, 
                . ~ . + (1|participant.id_in_session) + (1|gender)),
    
    m3 = update(formula_base,
                . ~ . + (1|participant.id_in_session) + (1|gender) + 
                (1|direction:participant.id_in_session)),
    
    m4 = update(formula_base,
                . ~ . + (1|participant.id_in_session) + (1|gender) + 
                (1|consensus_numeric:participant.id_in_session)),
    
    m5 = update(formula_base,
                . ~ . + (1|participant.id_in_session) + (1|gender) + 
                (1|direction:participant.id_in_session) + 
                (1|consensus_numeric:participant.id_in_session))
  )
}

################## SPECIFIC PLOTTING FUNCTION ###################
create_switch_accuracy_plot <- function(data, model_results, anova_results, params) {
  interaction_p <- as.numeric(anova_results[
    "direction:consensus_numeric:choice_switch_across_trials", 
    "Pr(>Chisq)"])
  
  plot_data <- data %>%
    group_by(consensus_numeric, direction, choice_switch_across_trials) %>%
    summarise(
      value = mean(!!sym(params$outcome_var)),
      se = sd(!!sym(params$outcome_var)) / sqrt(n()),
      .groups = 'drop'
    ) %>%
    mutate(
      consensus_category = case_when(
        consensus_numeric == 2 ~ "4:0",
        consensus_numeric == 1 ~ "3:1",
        consensus_numeric == 0 ~ "2:2"
      ),
      consensus_category = factor(consensus_category, 
                                levels = c("2:2", "3:1", "4:0"))
    )
  
  if(params$is_accuracy) {
    plot_data <- plot_data %>%
      mutate(
        value = value * 100,
        se = se * 100
      )
  }
  
  ggplot(plot_data, 
         aes(x = consensus_category, 
             y = value, 
             color = direction, 
             group = direction)) +
    facet_wrap(~ifelse(choice_switch_across_trials == 1, 
                      "Switch trials", "Stay trials")) +
    geom_line(linewidth = 1) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = value - se,
                      ymax = value + se),
                  width = 0.2) +
    geom_ribbon(aes(ymin = value - se,
                    ymax = value + se,
                    fill = direction),
                alpha = 0.2,
                color = NA) +
    scale_color_manual(values = c("Against group" = "red", 
                                 "With group" = "blue")) +
    scale_fill_manual(values = c("Against group" = "red", 
                                "With group" = "blue")) +
    labs(
      x = "Group consensus",
      y = params$y_label,
      color = "Direction",
      fill = "Direction",
      title = "Three-way interaction:",
      subtitle = sprintf("P < %.1e", interaction_p)
    ) +
    theme_custom +
    {if(params$is_accuracy) 
      scale_y_continuous(limits = c(10, 70), breaks = seq(10, 70, by = 10))}
}

################## RUN ANALYSES ###################
# Read data
data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"), 
                 show_col_types = FALSE)

# Run accuracy analysis
accuracy_results <- run_mixed_model_pipeline(
  data = data,
  preprocessing_function = function(x) process_switch_accuracy_data(x, "accuracy"),
  model_formulas = get_switch_accuracy_formulas("player.choice1_accuracy"),
  plot_function = create_switch_accuracy_plot,
  analysis_name = "Choice Accuracy by Switch and Consensus",
  output_path = here("output", "behav", "group", 
                    "choice_accuracy_by_switch_and_consensus.txt"),
  additional_params = list(
    outcome_var = "player.choice1_accuracy",
    y_label = "Choice 1 accuracy on t + 1 (%)",
    is_accuracy = TRUE,
    emmeans_specs = c("direction", "consensus_numeric", "choice_switch_across_trials")
  )
)

# Run bet magnitude analysis
bet_results <- run_mixed_model_pipeline(
  data = data,
  preprocessing_function = function(x) process_switch_accuracy_data(x, "bet"),
  model_formulas = get_switch_accuracy_formulas("player.bet1"),
  plot_function = create_switch_accuracy_plot,
  analysis_name = "Bet Magnitude by Switch and Consensus",
  output_path = here("output", "behav", "group", 
                    "bet_magnitude_by_switch_and_consensus.txt"),
  additional_params = list(
    outcome_var = "player.bet1",
    y_label = "Bet 1 magnitude on t + 1",
    is_accuracy = FALSE,
    emmeans_specs = c("direction", "consensus_numeric", "choice_switch_across_trials")
  )
)
```

## Supplementary figures 

Bet difference as a function of choice switching on the current trial and group consensus (Fig Supp 2A)
```{r bet_difference_analysis}
source(here("R", "mixed_models_group.R"))

################## SPECIFIC PREPROCESSING ###################
process_bet_difference_data <- function(data) {
  # Calculate bet difference and create groups
  data %>%
    mutate(
      bet_difference = player.bet2 - player.bet1,
      direction = if_else(player.choice1_with > 0.5, 
                         "With group", "Against group")
    ) %>%
    filter(!is.na(direction)) %>%  # Remove any NA cases
    mutate(
      consensus_numeric = case_when(
        player.choice1_with %in% c(0, 1) ~ 2,
        player.choice1_with %in% c(0.25, 0.75) ~ 1,
        player.choice1_with == 0.5 ~ 0
      ),
      direction = factor(direction),
      gender = factor(gender),
      switch_vs_stay = factor(player.switch_vs_stay),
      participant.id_in_session = factor(participant.id_in_session)
    )
}

################## SPECIFIC MODEL FORMULAS ###################
bet_difference_formulas <- list(
  m1 = bet_difference ~ direction * consensus_numeric * switch_vs_stay + 
         (1|participant.id_in_session),
  
  m2 = bet_difference ~ direction * consensus_numeric * switch_vs_stay + 
         (1|participant.id_in_session) + (1|gender),
  
  m3 = bet_difference ~ direction * consensus_numeric * switch_vs_stay + 
         (1|participant.id_in_session) + (1|gender) + 
         (1|direction:participant.id_in_session),
  
  m4 = bet_difference ~ direction * consensus_numeric * switch_vs_stay + 
         (1|participant.id_in_session) + (1|gender) + 
         (1|consensus_numeric:participant.id_in_session),
  
  m5 = bet_difference ~ direction * consensus_numeric * switch_vs_stay + 
         (1|participant.id_in_session) + (1|gender) + 
         (1|direction:participant.id_in_session) + 
         (1|consensus_numeric:participant.id_in_session)
)

################## SPECIFIC PLOTTING FUNCTION ###################
create_bet_difference_plot <- function(data, model_results, anova_results, params) {
  interaction_p <- anova_results[
    "direction:consensus_numeric:switch_vs_stay", 
    "Pr(>Chisq)"]
  
  plot_data <- data %>%
    group_by(consensus_numeric, direction, switch_vs_stay) %>%
    summarise(
      mean_diff = mean(bet_difference),
      se = sd(bet_difference) / sqrt(n()),
      .groups = 'drop'
    ) %>%
    mutate(
      consensus_category = case_when(
        consensus_numeric == 2 ~ "4:0",
        consensus_numeric == 1 ~ "3:1",
        consensus_numeric == 0 ~ "2:2"
      ),
      consensus_category = factor(consensus_category, 
                                levels = c("2:2", "3:1", "4:0"))
    )
  
  ggplot(plot_data, 
         aes(x = consensus_category, 
             y = mean_diff, 
             color = direction, 
             group = direction)) +
    facet_wrap(~ifelse(switch_vs_stay == 1, 
                      '"Switch" trials:\nC2(t) ≠ C1(t)', 
                      '"Stay" trials:\nC2(t) = C1(t)')) +
    geom_line(linewidth = 1) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = mean_diff - se,
                      ymax = mean_diff + se),
                  width = 0.2) +
    geom_ribbon(aes(ymin = mean_diff - se,
                    ymax = mean_diff + se,
                    fill = direction),
                alpha = 0.2,
                color = NA) +
    scale_color_manual(values = c("Against group" = "red", 
                                 "With group" = "blue")) +
    scale_fill_manual(values = c("Against group" = "red", 
                                "With group" = "blue")) +
    scale_y_continuous(limits = c(-0.5, 0.7), 
                      breaks = seq(-0.5, 0.7, by = 0.1)) +
    labs(
      x = "Group consensus",
      y = "Bet difference (Bet 2 - Bet 1)",
      color = "Direction",
      fill = "Direction",
      title = "Direction by Choice:",
      subtitle = sprintf("P < %.1e", interaction_p)
    ) +
    theme_custom
}

################## RUN ANALYSIS ###################
# Read data
data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"), 
                 show_col_types = FALSE)

# Run analysis
bet_difference_results <- run_mixed_model_pipeline(
  data = data,
  preprocessing_function = process_bet_difference_data,
  model_formulas = bet_difference_formulas,
  plot_function = create_bet_difference_plot,
  analysis_name = "Bet Difference by Choice Switch",
  output_path = here("output", "behav", "group",
                    "bet_difference_by_choice_switch.txt"),
  additional_params = list(
    emmeans_specs = c("direction", "consensus_numeric", "switch_vs_stay")
  )
)
```

## Choice accuracy and bet magnitude relative to reversal (Figs S2-B-C)

Choice accuracy and bet magnitude relative to reversal (plus and minus 3 trials)
```{r reversal_analysis}
source(here("R", "mixed_models_group.R"))

################## SPECIFIC PREPROCESSING ###################
process_reversal_data <- function(data, outcome_type) {
  # Get reversal trials
  reversal_trials <- data %>% 
    filter(group.reversal_happened == 1) %>%
    select(group.trial_number) %>%
    distinct()
  
  # Define columns based on outcome type
  cols <- if(outcome_type == "accuracy") {
    c(player.choice1_accuracy = "Choice 1", 
      player.choice2_accuracy = "Choice 2")
  } else {
    c(player.bet1 = "Bet 1", 
      player.bet2 = "Bet 2")
  }
  
  # Process data
  data %>%
    group_by(participant.id_in_session) %>%
    mutate(
      trial_to_reversal = map_dbl(group.trial_number, function(x) {
        reversal_trial <- reversal_trials$group.trial_number
        relative_pos <- x - reversal_trial
        if(any(abs(relative_pos) <= 3)) {
          relative_pos[which.min(abs(relative_pos))]
        } else {
          NA
        }
      })
    ) %>%
    filter(!is.na(trial_to_reversal)) %>%
    pivot_longer(
      cols = names(cols),
      names_to = if(outcome_type == "accuracy") "choice_type" else "bet_type",
      values_to = if(outcome_type == "accuracy") "accuracy" else "bet"
    ) %>%
    mutate(
      choice_type = if(outcome_type == "accuracy") 
        factor(choice_type, levels = names(cols), labels = cols) else NULL,
      bet_type = if(outcome_type == "bet")
        factor(bet_type, levels = names(cols), labels = cols) else NULL,
      trial_to_reversal = factor(trial_to_reversal),
      participant.id_in_session = factor(participant.id_in_session),
      gender = factor(gender)
    )
}

################## SPECIFIC MODEL FORMULAS ###################
get_reversal_formulas <- function(outcome_type) {
  # Set up formula components
  dv <- if(outcome_type == "accuracy") "accuracy" else "bet"
  iv <- if(outcome_type == "accuracy") "choice_type" else "bet_type"
  
  list(
    m1 = as.formula(paste(dv, "~", iv, "*trial_to_reversal + 
                         (1|participant.id_in_session)")),
    
    m2 = as.formula(paste(dv, "~", iv, "*trial_to_reversal + 
                         (1|participant.id_in_session) + (1|gender)")),
    
    m3 = as.formula(paste(dv, "~", iv, "*trial_to_reversal + 
                         (1|participant.id_in_session) + (1|gender) + (1|", 
                         iv, ":participant.id_in_session)"))
  )
}

################## SPECIFIC PLOTTING FUNCTION ###################
create_reversal_plot <- function(data, model_results, anova_results, params) {
  trial_p <- anova_results["trial_to_reversal", "Pr(>Chisq)"]
  type_col <- params$type_col
  
  plot_data <- data %>%
    group_by(trial_to_reversal, !!sym(type_col)) %>%
    summarise(
      value = mean(!!sym(params$value_col)) * params$scale_factor,
      se = sd(!!sym(params$value_col)) / sqrt(n()) * params$scale_factor,
      .groups = 'drop'
    )
  
  ggplot(plot_data, 
         aes(x = trial_to_reversal, 
             y = value, 
             color = !!sym(type_col), 
             group = !!sym(type_col))) +
    geom_line(linewidth = 1) +
    geom_point(size = 3) +
    geom_errorbar(aes(ymin = value - se,
                      ymax = value + se),
                  width = 0.2) +
    scale_color_manual(values = params$colors) +
    scale_x_discrete(labels = c("-3", "-2", "-1", "0", "1", "2", "3")) +
    {if(params$is_accuracy) 
      scale_y_continuous(limits = c(30, 70), breaks = seq(30, 70, by = 10))} +
    labs(
      x = "Trial (relative to reversal)",
      y = params$y_label,
      color = params$legend_title,
      title = "Main effect of trial:",
      subtitle = sprintf("P = %.3f", trial_p)
    ) +
    theme_custom
}

################## RUN ANALYSES ###################
# Read data
data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"), 
                 show_col_types = FALSE)

# Run accuracy analysis
accuracy_results <- run_mixed_model_pipeline(
  data = data,
  preprocessing_function = function(x) process_reversal_data(x, "accuracy"),
  model_formulas = get_reversal_formulas("accuracy"),
  plot_function = create_reversal_plot,
  analysis_name = "Choice Accuracy by Trial Reversal",
  output_path = here("output", "behav", "group",
                    "choice_accuracy_by_trial_reversal.txt"),
  additional_params = list(
    type_col = "choice_type",
    value_col = "accuracy",
    y_label = "Choice accuracy (%)",
    legend_title = "Choice type",
    colors = c("Choice 1" = "lightblue", "Choice 2" = "darkblue"),
    is_accuracy = TRUE,
    scale_factor = 100,
    emmeans_specs = "trial_to_reversal"
  )
)

# Run bet magnitude analysis
bet_results <- run_mixed_model_pipeline(
  data = data,
  preprocessing_function = function(x) process_reversal_data(x, "bet"),
  model_formulas = get_reversal_formulas("bet"),
  plot_function = create_reversal_plot,
  analysis_name = "Bet Magnitude by Trial Reversal",
  output_path = here("output", "behav", "group",
                    "bet_magnitude_by_trial_reversal.txt"),
  additional_params = list(
    type_col = "bet_type",
    value_col = "bet",
    y_label = "Bet magnitude",
    legend_title = "Bet type",
    colors = c("Bet 1" = "#90EE90", "Bet 2" = "#006400"),
    is_accuracy = FALSE,
    scale_factor = 1,
    emmeans_specs = "trial_to_reversal"
  )
)
```
