"0","source(here(""R"", ""mixed_models_group.R""))"
"2","[38;5;255m[90m[conflicted][38;5;255m Removing existing preference.[39m"
"2","[38;5;255m[90m[conflicted][38;5;255m Will prefer [1m[34mdplyr[38;5;255m[22m::select over any other package.[39m"
"2","[38;5;255m[90m[conflicted][38;5;255m Removing existing preference.[39m"
"2","[38;5;255m[90m[conflicted][38;5;255m Will prefer [1m[34mdplyr[38;5;255m[22m::filter over any other package.[39m"
"2","[38;5;255m[90m[conflicted][38;5;255m Removing existing preference.[39m"
"2","[38;5;255m[90m[conflicted][38;5;255m Will prefer [1m[34mlmerTest[38;5;255m[22m::lmer over any other package.[39m"
"0","################## SPECIFIC PREPROCESSING ###################"
"0","process_reversal_data <- function(data, outcome_type) {"
"0","  # Get reversal trials"
"0","  reversal_trials <- data %>% "
"0","    filter(group.reversal_happened == 1) %>%"
"0","    select(group.trial_number) %>%"
"0","    distinct()"
"0","  "
"0","  # Define columns based on outcome type"
"0","  cols <- if(outcome_type == ""accuracy"") {"
"0","    c(player.choice1_accuracy = ""Choice 1"", "
"0","      player.choice2_accuracy = ""Choice 2"")"
"0","  } else {"
"0","    c(player.bet1 = ""Bet 1"", "
"0","      player.bet2 = ""Bet 2"")"
"0","  }"
"0","  "
"0","  # Process data"
"0","  data %>%"
"0","    group_by(participant.id_in_session) %>%"
"0","    mutate("
"0","      trial_to_reversal = map_dbl(group.trial_number, function(x) {"
"0","        reversal_trial <- reversal_trials$group.trial_number"
"0","        relative_pos <- x - reversal_trial"
"0","        if(any(abs(relative_pos) <= 3)) {"
"0","          relative_pos[which.min(abs(relative_pos))]"
"0","        } else {"
"0","          NA"
"0","        }"
"0","      })"
"0","    ) %>%"
"0","    filter(!is.na(trial_to_reversal)) %>%"
"0","    pivot_longer("
"0","      cols = names(cols),"
"0","      names_to = if(outcome_type == ""accuracy"") ""choice_type"" else ""bet_type"","
"0","      values_to = if(outcome_type == ""accuracy"") ""accuracy"" else ""bet"""
"0","    ) %>%"
"0","    mutate("
"0","      choice_type = if(outcome_type == ""accuracy"") "
"0","        factor(choice_type, levels = names(cols), labels = cols) else NULL,"
"0","      bet_type = if(outcome_type == ""bet"")"
"0","        factor(bet_type, levels = names(cols), labels = cols) else NULL,"
"0","      trial_to_reversal = factor(trial_to_reversal),"
"0","      participant.id_in_session = factor(participant.id_in_session),"
"0","      gender = factor(gender)"
"0","    )"
"0","}"
"0",""
"0","################## SPECIFIC MODEL FORMULAS ###################"
"0","get_reversal_formulas <- function(outcome_type) {"
"0","  # Set up formula components"
"0","  dv <- if(outcome_type == ""accuracy"") ""accuracy"" else ""bet"""
"0","  iv <- if(outcome_type == ""accuracy"") ""choice_type"" else ""bet_type"""
"0","  "
"0","  list("
"0","    m1 = as.formula(paste(dv, ""~"", iv, ""*trial_to_reversal + "
"0","                         (1|participant.id_in_session)"")),"
"0","    "
"0","    m2 = as.formula(paste(dv, ""~"", iv, ""*trial_to_reversal + "
"0","                         (1|participant.id_in_session) + (1|gender)"")),"
"0","    "
"0","    m3 = as.formula(paste(dv, ""~"", iv, ""*trial_to_reversal + "
"0","                         (1|participant.id_in_session) + (1|gender) + (1|"", "
"0","                         iv, "":participant.id_in_session)""))"
"0","  )"
"0","}"
"0",""
"0","################## SPECIFIC PLOTTING FUNCTION ###################"
"0","create_reversal_plot <- function(data, model_results, anova_results, params) {"
"0","  trial_p <- anova_results[""trial_to_reversal"", ""Pr(>Chisq)""]"
"0","  type_col <- params$type_col"
"0","  "
"0","  plot_data <- data %>%"
"0","    group_by(trial_to_reversal, !!sym(type_col)) %>%"
"0","    summarise("
"0","      value = mean(!!sym(params$value_col)) * params$scale_factor,"
"0","      se = sd(!!sym(params$value_col)) / sqrt(n()) * params$scale_factor,"
"0","      .groups = 'drop'"
"0","    )"
"0","  "
"0","  ggplot(plot_data, "
"0","         aes(x = trial_to_reversal, "
"0","             y = value, "
"0","             color = !!sym(type_col), "
"0","             group = !!sym(type_col))) +"
"0","    geom_line(linewidth = 1) +"
"0","    geom_point(size = 3) +"
"0","    geom_errorbar(aes(ymin = value - se,"
"0","                      ymax = value + se),"
"0","                  width = 0.2) +"
"0","    scale_color_manual(values = params$colors) +"
"0","    scale_x_discrete(labels = c(""-3"", ""-2"", ""-1"", ""0"", ""1"", ""2"", ""3"")) +"
"0","    {if(params$is_accuracy) "
"0","      scale_y_continuous(limits = c(30, 70), breaks = seq(30, 70, by = 10))} +"
"0","    labs("
"0","      x = ""Trial (relative to reversal)"","
"0","      y = params$y_label,"
"0","      color = params$legend_title,"
"0","      title = ""Main effect of trial:"","
"0","      subtitle = sprintf(""P = %.3f"", trial_p)"
"0","    ) +"
"0","    theme_custom"
"0","}"
"0",""
"0","################## RUN ANALYSES ###################"
"0","# Read data"
"0","data <- read_csv(here(""data"", ""preprocessed"", ""merged_test_data.csv""), "
"0","                 show_col_types = FALSE)"
"0",""
"0","# Run accuracy analysis"
"0","accuracy_results <- run_mixed_model_pipeline("
"0","  data = data,"
"0","  preprocessing_function = function(x) process_reversal_data(x, ""accuracy""),"
"0","  model_formulas = get_reversal_formulas(""accuracy""),"
"0","  plot_function = create_reversal_plot,"
"0","  analysis_name = ""Choice Accuracy by Trial Reversal"","
"0","  output_path = here(""output"", ""behav"", ""group"","
"0","                    ""choice_accuracy_by_trial_reversal.txt""),"
"0","  additional_params = list("
"0","    type_col = ""choice_type"","
"0","    value_col = ""accuracy"","
"0","    y_label = ""Choice accuracy (%)"","
"0","    legend_title = ""Choice type"","
"0","    colors = c(""Choice 1"" = ""lightblue"", ""Choice 2"" = ""darkblue""),"
"0","    is_accuracy = TRUE,"
"0","    scale_factor = 100,"
"0","    emmeans_specs = ""trial_to_reversal"""
"0","  )"
"0",")"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","Note: D.f. calculations have been disabled because the number of observations exceeds 6000.
To enable adjustments, add the argument 'pbkrtest.limit = 7000' (or larger)
[or, globally, 'set emm_options(pbkrtest.limit = 7000)' or larger];
but be warned that this may result in large computation time and memory use.
"
"2","Note: D.f. calculations have been disabled because the number of observations exceeds 6000.
To enable adjustments, add the argument 'lmerTest.limit = 7000' (or larger)
[or, globally, 'set emm_options(lmerTest.limit = 7000)' or larger];
but be warned that this may result in large computation time and memory use.
"
"2","NOTE: Results may be misleading due to involvement in interactions
"
