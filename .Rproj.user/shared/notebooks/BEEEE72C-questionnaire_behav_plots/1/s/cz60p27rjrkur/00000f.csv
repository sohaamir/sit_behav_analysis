"0","# Read and process data"
"0","data <- read_csv(here(""data"", ""preprocessed"", ""merged_test_data.csv""))"
"2","[1mRows: [22m[34m600[39m [1mColumns: [22m[34m94[39m"
"2","[36mâ”€â”€[39m [1mColumn specification[22m [36mâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[39m
[1mDelimiter:[22m "",""
[31mchr[39m (12): participant.label, participant.code, player.choice1, player.choice2, player.left_image, player.right_image, player.chosen_image_one, player.chosen_image_two, player.chosen_image_computer, player.chosen_image_computer_two, group.seventy_percent_im...
[32mdbl[39m (80): participant.id_in_session, player.id_in_group, player.bet1, player.bet2, player.trial_reward, player.chosen_image_one_binary, player.chosen_image_two_binary, player.choice1_with, player.choice1_against, player.choice2_with, player.choice2_against...
[33mlgl[39m  (2): player.computer_choice1, player.computer_choice2"
"2","
[36mâ„¹[39m Use `spec()` to retrieve the full column specification for this data.
[36mâ„¹[39m Specify the column types or set `show_col_types = FALSE` to quiet this message."
"0","# Calculate differences per participant"
"0","participant_data <- data %>%"
"0","  group_by(participant.id_in_session) %>%"
"0","  summarise("
"0","    choice_accuracy_diff = mean(player.choice2_accuracy - player.choice1_accuracy) * 100,"
"0","    bet_magnitude_diff = mean(player.bet2 - player.bet1)"
"0","  ) %>%"
"0","  # Join with questionnaire data (taking first instance of questionnaire scores per participant)"
"0","  left_join("
"0","    data %>%"
"0","      group_by(participant.id_in_session) %>%"
"0","      slice(1) %>%"
"0","      select(participant.id_in_session, ssms, dass, lsas, srp_sf, ami, aq_10),"
"0","    by = ""participant.id_in_session"""
"0","  )"
"0",""
"0","# Function to run analysis for each questionnaire"
"0","analyze_questionnaire_effects <- function(questionnaire) {"
"0","  # For choice accuracy"
"0","  choice_model <- lm(paste(""choice_accuracy_diff ~"", questionnaire), "
"0","                    data = participant_data)"
"0","  "
"0","  # For bet magnitude"
"0","  bet_model <- lm(paste(""bet_magnitude_diff ~"", questionnaire), "
"0","                 data = participant_data)"
"0","  "
"0","  # Extract results"
"0","  choice_p <- summary(choice_model)$coefficients[2,4]"
"0","  bet_p <- summary(bet_model)$coefficients[2,4]"
"0","  "
"0","  # Calculate correlations"
"0","  choice_cor <- cor.test(participant_data[[questionnaire]], "
"0","                        participant_data$choice_accuracy_diff)"
"0","  bet_cor <- cor.test(participant_data[[questionnaire]], "
"0","                      participant_data$bet_magnitude_diff)"
"0","  "
"0","  list("
"0","    questionnaire = questionnaire,"
"0","    choice_p = choice_p,"
"0","    bet_p = bet_p,"
"0","    choice_r = choice_cor$estimate,"
"0","    bet_r = bet_cor$estimate"
"0","  )"
"0","}"
"0",""
"0","# Run analysis for all questionnaires"
"0","questionnaires <- c(""ssms"", ""dass"", ""lsas"", ""srp_sf"", ""ami"", ""aq_10"")"
"0","results <- map_df(questionnaires, analyze_questionnaire_effects)"
"0",""
"0","# Add FDR correction"
"0","results <- results %>%"
"0","  mutate("
"0","    choice_p_adj = p.adjust(choice_p, method = ""fdr""),"
"0","    bet_p_adj = p.adjust(bet_p, method = ""fdr"")"
"0","  )"
"0",""
"0","# Print results table"
"0","print(""Results for questionnaire effects:"")"
"1","[1]"
"1"," ""Results for questionnaire effects:"""
"1","
"
"0","print(results %>%"
"0","      mutate(across(where(is.numeric), ~round(., 3))))"
