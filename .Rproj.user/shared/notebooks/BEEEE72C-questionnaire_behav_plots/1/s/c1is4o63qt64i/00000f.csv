"0","# Read and process data"
"0","merged_data <- read_csv(here(""data"", ""preprocessed"", ""merged_test_data.csv""), show_col_types = FALSE)"
"0",""
"0","# Create separate datasets for switch and stay trials"
"0","switch_data <- merged_data %>% "
"0"," filter(choice_switch_across_trials == 1) %>%"
"0"," mutate("
"0","   consensus_numeric = case_when("
"0","     player.choice1_with %in% c(0, 1) ~ 2,  # 4:0"
"0","     player.choice1_with %in% c(0.25, 0.75) ~ 1,  # 3:1"
"0","     player.choice1_with == 0.5 ~ 0  # 2:2"
"0","   ),"
"0","   direction = if_else(player.choice1_with > 0.5, ""With group"", ""Against group"")"
"0"," )"
"0",""
"0","stay_data <- merged_data %>%"
"0"," filter(choice_switch_across_trials == 0) %>%"
"0"," mutate("
"0","   consensus_numeric = case_when("
"0","     player.choice1_with %in% c(0, 1) ~ 2,  # 4:0"
"0","     player.choice1_with %in% c(0.25, 0.75) ~ 1,  # 3:1"
"0","     player.choice1_with == 0.5 ~ 0  # 2:2"
"0","   ),"
"0","   direction = if_else(player.choice1_with > 0.5, ""With group"", ""Against group"")"
"0"," )"
"0",""
"0","# Modified diagnostic checking function"
"0","check_model_diagnostics <- function(model) {"
"0"," conv_check <- model@optinfo$conv$opt"
"0"," diagnostics <- list("
"0","   convergence = conv_check,"
"0","   resid_mean = mean(residuals(model)),"
"0","   resid_sd = sd(residuals(model)),"
"0","   resid_normality = shapiro.test(residuals(model))$p.value"
"0"," )"
"0"," return(diagnostics)"
"0","}"
"0",""
"0","# Modified model running function"
"0","run_questionnaire_models <- function(quest_var, data_type) {"
"0"," print(paste(""\nRunning models for:"", quest_var, ""in"", data_type, ""trials""))"
"0"," "
"0"," # Select appropriate dataset"
"0"," data <- if(data_type == ""switch"") switch_data else stay_data"
"0"," "
"0"," # Scale questionnaire variables"
"0"," data <- data %>%"
"0","   mutate("
"0","     across(c(ssms, dass, lsas, srp_sf, ami, aq_10, age), scale),"
"0","     gender = factor(gender),"
"0","     direction = factor(direction)"
"0","   )"
"0"," "
"0"," # Run models"
"0"," model1 <- lmer(as.formula(paste(""player.choice1_accuracy ~ direction * consensus_numeric *"", "
"0","                                quest_var, ""+ age + (1|participant.id_in_session)"")),"
"0","               data = data,"
"0","               control = lmerControl(optimizer = ""bobyqa""))"
"0"," "
"0"," model2 <- lmer(as.formula(paste(""player.choice1_accuracy ~ direction * consensus_numeric *"", "
"0","                                quest_var, ""+ age + (1|participant.id_in_session) + (1|gender)"")),"
"0","               data = data,"
"0","               control = lmerControl(optimizer = ""bobyqa""))"
"0"," "
"0"," # Get best model"
"0"," models_list <- list(model1, model2)"
"0"," aic_values <- sapply(models_list, AIC)"
"0"," winning_model <- models_list[[which.min(aic_values)]]"
"0"," "
"0"," # Get model statistics"
"0"," model_anova <- anova(winning_model)"
"0"," interaction_p <- model_anova[paste0(""direction:consensus_numeric:"", quest_var), ""Pr(>F)""]"
"0"," "
"0"," list("
"0","   questionnaire = quest_var,"
"0","   trial_type = data_type,"
"0","   winning_model = winning_model,"
"0","   p_value = interaction_p,"
"0","   aic = min(aic_values),"
"0","   diagnostics = check_model_diagnostics(winning_model)"
"0"," )"
"0","}"
"0",""
"0","# Custom theme"
"0","theme_custom <- theme_minimal() +"
"0"," theme("
"0","   panel.grid.minor = element_blank(),"
"0","   legend.position = ""right"","
"0","   plot.title = element_text(size = 12, face = ""bold""),"
"0","   plot.subtitle = element_text(size = 10),"
"0","   axis.title = element_text(size = 10),"
"0","   legend.title = element_text(size = 10),"
"0","   legend.text = element_text(size = 9)"
"0"," )"
"0",""
"0","# Continuous relationship plotting function"
"0","plot_continuous_relationship <- function(var, all_data, model_results) {"
"0"," # Combine data from both trial types and calculate subject-level averages"
"0"," subject_averages <- bind_rows("
"0","   switch_data %>% mutate(trial_type = ""Switch trials""),"
"0","   stay_data %>% mutate(trial_type = ""Stay trials"")"
"0"," ) %>%"
"0","   group_by(participant.id_in_session, direction, consensus_numeric, trial_type, .data[[var]]) %>%"
"0","   summarise("
"0","     mean_accuracy = mean(player.choice1_accuracy) * 100,"
"0","     .groups = 'drop'"
"0","   ) %>%"
"0","   mutate("
"0","     consensus_level = case_when("
"0","       consensus_numeric == 2 ~ ""4:0"","
"0","       consensus_numeric == 1 ~ ""3:1"","
"0","       consensus_numeric == 0 ~ ""2:2"""
"0","     ),"
"0","     consensus_level = factor(consensus_level, levels = c(""2:2"", ""3:1"", ""4:0""))"
"0","   )"
"0"," "
"0"," # Calculate correlations for effect sizes"
"0"," effects <- subject_averages %>%"
"0","   group_by(direction, consensus_level, trial_type) %>%"
"0","   summarise("
"0","     correlation = cor(.data[[var]], mean_accuracy),"
"0","     .groups = 'drop'"
"0","   )"
"0"," "
"0"," p <- ggplot(subject_averages, "
"0","             aes(x = .data[[var]], "
"0","                 y = mean_accuracy,"
"0","                 color = direction)) +"
"0","   geom_point(alpha = 0.5) +"
"0","   geom_smooth(method = ""lm"", formula = y ~ x) +"
"0","   facet_grid(trial_type ~ consensus_level) +"
"0","   labs(x = var,"
"0","        y = ""Choice 1 accuracy on t + 1 (%)"","
"0","        title = paste(""Relationship between"", var, ""and accuracy""),"
"0","        subtitle = paste(""p ="", format.pval(model_results$p_value["
"0","          model_results$questionnaire == var], digits = 3)),"
"0","        caption = paste(""Effect sizes (r) range:"", "
"0","                       round(min(effects$correlation), 3), ""to"","
"0","                       round(max(effects$correlation), 3))) +"
"0","   scale_color_manual(values = c(""Against group"" = ""red"", ""With group"" = ""blue"")) +"
"0","   theme_custom"
"0"," "
"0"," print(p)"
"0","}"
"0",""
"0","# Run analyses for both conditions"
"0","questionnaire_vars <- c(""ssms"", ""dass"", ""lsas"", ""srp_sf"", ""ami"", ""aq_10"")"
"0","trial_types <- c(""switch"", ""stay"")"
"0",""
"0","# Create empty list to store results"
"0","all_results <- list()"
"0",""
"0","# Simple slopes analysis function"
"0","analyze_simple_slopes <- function(model, questionnaire_var, trial_type) {"
"0","  # Get appropriate dataset"
"0","  data <- if(trial_type == ""switch"") switch_data else stay_data"
"0","  "
"0","  # Create probe points for the questionnaire variable"
"0","  probe_points <- data %>%"
"0","    summarise("
"0","      low = mean(!!sym(questionnaire_var)) - sd(!!sym(questionnaire_var)),"
"0","      mean = mean(!!sym(questionnaire_var)),"
"0","      high = mean(!!sym(questionnaire_var)) + sd(!!sym(questionnaire_var))"
"0","    )"
"0","  "
"0","  # Create prediction grid"
"0","  pred_data <- expand.grid("
"0","    direction = unique(data$direction),"
"0","    consensus_numeric = unique(data$consensus_numeric),"
"0","    quest_score = c(probe_points$low, probe_points$mean, probe_points$high)"
"0","  ) %>%"
"0","    mutate("
"0","      quest_level = rep(c(""-1 SD"", ""Mean"", ""+1 SD""), "
"0","                       each = length(unique(data$direction)) * length(unique(data$consensus_numeric))),"
"0","      direction = factor(direction)"
"0","    )"
"0","  "
"0","  # Add other necessary variables at their means/reference levels"
"0","  pred_data$age <- 0  # since age is scaled, 0 is the mean"
"0","  "
"0","  # Create column with questionnaire variable name"
"0","  pred_data[[questionnaire_var]] <- pred_data$quest_score"
"0","  "
"0","  # Get predictions"
"0","  pred_data$predicted <- predict(model, newdata = pred_data, re.form = NA)"
"0","  "
"0","  # Convert consensus numeric to factor for plotting"
"0","  pred_data <- pred_data %>%"
"0","    mutate("
"0","      consensus_level = case_when("
"0","        consensus_numeric == 2 ~ ""4:0"","
"0","        consensus_numeric == 1 ~ ""3:1"","
"0","        consensus_numeric == 0 ~ ""2:2"""
"0","      ),"
"0","      consensus_level = factor(consensus_level, levels = c(""2:2"", ""3:1"", ""4:0""))"
"0","    )"
"0","  "
"0","  # Create plot"
"0","  p <- ggplot(pred_data, "
"0","              aes(x = consensus_level, "
"0","                  y = predicted * 100,  # Convert to percentage"
"0","                  color = direction,"
"0","                  linetype = quest_level,"
"0","                  group = interaction(direction, quest_level))) +"
"0","    geom_line() +"
"0","    geom_point(size = 3) +"
"0","    labs(title = paste(""Simple slopes analysis for"", questionnaire_var, ""in"", trial_type, ""trials""),"
"0","         x = ""Consensus Level"","
"0","         y = ""Predicted Choice 1 Accuracy (%)"","
"0","         color = ""Direction"","
"0","         linetype = paste(questionnaire_var, ""Level"")) +"
"0","    scale_color_manual(values = c(""Against group"" = ""red"", ""With group"" = ""blue"")) +"
"0","    theme_custom"
"0","  "
"0","  # Get model summary for slopes"
"0","  model_summary <- summary(model)"
"0","  "
"0","  return(list("
"0","    predictions = pred_data,"
"0","    plot = p,"
"0","    model_summary = model_summary"
"0","  ))"
"0","}"
"0",""
"0","# Run models for each combination"
"0","for(var in questionnaire_vars) {"
"0","  for(trial in trial_types) {"
"0","    result <- run_questionnaire_models(var, trial)"
"0","    all_results[[paste(var, trial, sep=""_"")]] <- tibble("
"0","      questionnaire = result$questionnaire,"
"0","      trial_type = result$trial_type,"
"0","      p_value = result$p_value,"
"0","      p_adjusted = p.adjust(result$p_value, method = ""fdr""),"
"0","      aic = result$aic,"
"0","      resid_normality = result$diagnostics$resid_normality,"
"0","      model_converged = !is.null(result$diagnostics$convergence)"
"0","    )"
"0","  }"
"0","}"
"1","[1]"
"1"," ""\nRunning models for: ssms in switch trials"""
"1","
"
"1","[1m[33mError[39m in `mutate()`:[22m
[38;5;255m[36mâ„¹[38;5;255m In argument: `across(c(ssms, dass, lsas, srp_sf, ami, aq_10, age), scale)`.[39m
[1mCaused by error in `across()`:[22m
[38;5;255m[33m![38;5;255m `.fns` must be a function, a formula, or a list of functions/formulas.[39m
Backtrace:
[90m 1. [39m[1mglobal[22m run_questionnaire_models(var, trial)
[90m 4. [39m[1m[94mdplyr:::mutate.data.frame([39m[22m...[1m[94m)[39m[22m
[90m 5. [39mdplyr:::mutate_cols(.data, dplyr_quosures(...), by)
[90m 7. [39mdplyr:::mutate_col(dots[[i]], data, mask, new_columns)
[90m 8. [39m[1m[94mdplyr:::expand_across([39m[22mdot[1m[94m)[39m[22m
"
