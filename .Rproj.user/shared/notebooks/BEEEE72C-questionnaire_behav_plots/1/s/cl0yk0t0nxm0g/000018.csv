"0","# Read and process data"
"0","df <- read_csv(here(""data"", ""preprocessed"", ""merged_test_data.csv""), show_col_types = FALSE)"
"0",""
"0","# Calculate bet difference and set up variables "
"0","df <- df %>%"
"0","mutate("
"0","  bet_difference = player.bet2 - player.bet1,"
"0","  consensus_numeric = case_when("
"0","    player.choice1_with %in% c(0, 1) ~ 2,  # 4:0"
"0","    player.choice1_with %in% c(0.25, 0.75) ~ 1,  # 3:1"
"0","    player.choice1_with == 0.5 ~ 0  # 2:2"
"0","  ),"
"0","  direction = if_else(player.choice1_with > 0.5, ""With group"", ""Against group"")"
"0",")"
"0",""
"0","# Modified model running function"
"0","run_questionnaire_models <- function(quest_var, data) {"
"0"," print(paste(""\nRunning models for:"", quest_var))"
"0"," "
"0"," # Scale questionnaire variables and prepare data"
"0"," analysis_data <- data %>%"
"0","   mutate("
"0","     across(c(ssms, dass, lsas, srp_sf, ami, aq_10, age), scale),"
"0","     gender = factor(gender),"
"0","     direction = factor(direction),"
"0","     switch_vs_stay = factor(player.switch_vs_stay),"
"0","     participant.id_in_session = factor(participant.id_in_session)"
"0","   )"
"0"," "
"0"," # Run models"
"0"," model1 <- lmer(as.formula(paste(""bet_difference ~ direction * consensus_numeric * switch_vs_stay *"", "
"0","                                quest_var, ""+ age + (1|participant.id_in_session)"")),"
"0","               data = analysis_data,"
"0","               control = lmerControl(optimizer = ""bobyqa""))"
"0"," "
"0"," model2 <- lmer(as.formula(paste(""bet_difference ~ direction * consensus_numeric * switch_vs_stay *"", "
"0","                                quest_var, ""+ age + (1|participant.id_in_session) + (1|gender)"")),"
"0","               data = analysis_data,"
"0","               control = lmerControl(optimizer = ""bobyqa""))"
"0"," "
"0"," # Get best model"
"0"," models_list <- list(model1, model2)"
"0"," aic_values <- sapply(models_list, AIC)"
"0"," winning_model <- models_list[[which.min(aic_values)]]"
"0"," "
"0"," # Get model statistics"
"0"," model_anova <- car::Anova(winning_model, type = 2)"
"0"," interaction_p <- model_anova[paste0(""direction:consensus_numeric:switch_vs_stay:"", quest_var), ""Pr(>Chisq)""]"
"0"," "
"0"," list("
"0","   questionnaire = quest_var,"
"0","   winning_model = winning_model,"
"0","   p_value = interaction_p,"
"0","   aic = min(aic_values)"
"0"," )"
"0","}"
"0",""
"0","# Custom theme"
"0","theme_custom <- theme_minimal() +"
"0"," theme("
"0","   panel.grid.minor = element_blank(),"
"0","   legend.position = ""right"","
"0","   plot.title = element_text(size = 12, face = ""bold""),"
"0","   plot.subtitle = element_text(size = 10),"
"0","   axis.title = element_text(size = 10),"
"0","   legend.title = element_text(size = 10),"
"0","   legend.text = element_text(size = 9)"
"0"," )"
"0",""
"0","# Continuous relationship plotting function"
"0","plot_continuous_relationship <- function(var, data, model_results) {"
"0"," # Calculate subject-level averages"
"0"," subject_averages <- data %>%"
"0","   group_by(participant.id_in_session, direction, consensus_numeric, "
"0","            player.switch_vs_stay, .data[[var]]) %>%"
"0","   summarise("
"0","     mean_diff = mean(bet_difference),"
"0","     .groups = 'drop'"
"0","   ) %>%"
"0","   mutate("
"0","     consensus_level = case_when("
"0","       consensus_numeric == 2 ~ ""4:0"","
"0","       consensus_numeric == 1 ~ ""3:1"","
"0","       consensus_numeric == 0 ~ ""2:2"""
"0","     ),"
"0","     consensus_level = factor(consensus_level, levels = c(""2:2"", ""3:1"", ""4:0""))"
"0","   )"
"0"," "
"0"," # Calculate correlations for effect sizes"
"0"," effects <- subject_averages %>%"
"0","   group_by(direction, consensus_level, player.switch_vs_stay) %>%"
"0","   summarise("
"0","     correlation = cor(.data[[var]], mean_diff),"
"0","     .groups = 'drop'"
"0","   )"
"0"," "
"0"," p <- ggplot(subject_averages, "
"0","             aes(x = .data[[var]], "
"0","                 y = mean_diff,"
"0","                 color = direction)) +"
"0","   geom_point(alpha = 0.5) +"
"0","   geom_smooth(method = ""lm"", formula = y ~ x) +"
"0","   facet_grid(player.switch_vs_stay ~ consensus_level, "
"0","              labeller = labeller(player.switch_vs_stay = "
"0","                c(""0"" = ""Stay trials"", ""1"" = ""Switch trials""))) +"
"0","   labs(x = var,"
"0","        y = ""Bet difference (Bet 2 - Bet 1)"","
"0","        title = paste(""Relationship between"", var, ""and bet difference""),"
"0","        subtitle = paste(""p ="", format.pval(model_results$p_value["
"0","          model_results$questionnaire == var], digits = 3)),"
"0","        caption = paste(""Effect sizes (r) range:"", "
"0","                       round(min(effects$correlation, na.rm = TRUE), 3), ""to"","
"0","                       round(max(effects$correlation, na.rm = TRUE), 3))) +"
"0","   scale_color_manual(values = c(""Against group"" = ""red"", ""With group"" = ""blue"")) +"
"0","   theme_custom"
"0"," "
"0"," print(p)"
"0","}"
"0",""
"0","# Median-split plotting function "
"0","plot_median_split <- function(var, data, model_results) {"
"0"," summary_data <- data %>%"
"0","   mutate("
"0","     consensus_level = case_when("
"0","       consensus_numeric == 2 ~ ""4:0"","
"0","       consensus_numeric == 1 ~ ""3:1"","
"0","       consensus_numeric == 0 ~ ""2:2"""
"0","     ),"
"0","     consensus_level = factor(consensus_level, levels = c(""2:2"", ""3:1"", ""4:0"")),"
"0","     quest_group = ifelse(.data[[var]] > median(.data[[var]]), ""High"", ""Low"")"
"0","   ) %>%"
"0","   group_by(consensus_level, direction, quest_group, player.switch_vs_stay) %>%"
"0","   summarise("
"0","     mean_diff = mean(bet_difference),"
"0","     se = sd(bet_difference) / sqrt(n()),"
"0","     .groups = 'drop'"
"0","   )"
"0"," "
"0"," p <- ggplot(summary_data, "
"0","             aes(x = consensus_level, "
"0","                 y = mean_diff, "
"0","                 color = direction,"
"0","                 linetype = quest_group,"
"0","                 group = interaction(direction, quest_group))) +"
"0","   geom_line() +"
"0","   geom_point() +"
"0","   geom_errorbar(aes(ymin = mean_diff - se, "
"0","                     ymax = mean_diff + se), "
"0","                 width = 0.2) +"
"0","   facet_wrap(~player.switch_vs_stay,"
"0","              labeller = labeller(player.switch_vs_stay = "
"0","                c(""0"" = ""Stay trials"", ""1"" = ""Switch trials""))) +"
"0","   scale_color_manual(values = c(""Against group"" = ""red"", ""With group"" = ""blue"")) +"
"0","   labs(x = ""Group consensus"","
"0","        y = ""Bet difference (Bet 2 - Bet 1)"","
"0","        title = paste(""Effect of"", var, ""(Median-split)""),"
"0","        subtitle = paste(""p ="", format.pval(model_results$p_value["
"0","          model_results$questionnaire == var], digits = 3))) +"
"0","   theme_custom"
"0"," "
"0"," print(p)"
"0","}"
"0",""
"0","# Add simple slopes analysis function"
"0","analyze_simple_slopes <- function(model, questionnaire_var) {"
"0","  # Create probe points for the questionnaire variable"
"0","  probe_points <- df %>%"
"0","    summarise("
"0","      low = mean(!!sym(questionnaire_var)) - sd(!!sym(questionnaire_var)),"
"0","      mean = mean(!!sym(questionnaire_var)),"
"0","      high = mean(!!sym(questionnaire_var)) + sd(!!sym(questionnaire_var))"
"0","    )"
"0","  "
"0","  # Create prediction grid"
"0","  pred_data <- expand.grid("
"0","    direction = unique(df$direction),"
"0","    consensus_numeric = unique(df$consensus_numeric),"
"0","    switch_vs_stay = c(0, 1),"
"0","    quest_score = c(probe_points$low, probe_points$mean, probe_points$high)"
"0","  ) %>%"
"0","    mutate("
"0","      quest_level = rep(c(""-1 SD"", ""Mean"", ""+1 SD""), "
"0","                       each = length(unique(df$direction)) * "
"0","                         length(unique(df$consensus_numeric)) * 2),"
"0","      direction = factor(direction),"
"0","      switch_vs_stay = factor(switch_vs_stay)"
"0","    )"
"0","  "
"0","  # Add other necessary variables at their means/reference levels"
"0","  pred_data$age <- 0  # since age is scaled, 0 is the mean"
"0","  "
"0","  # Create column with questionnaire variable name"
"0","  pred_data[[questionnaire_var]] <- pred_data$quest_score"
"0","  "
"0","  # Get predictions"
"0","  pred_data$predicted <- predict(model, newdata = pred_data, re.form = NA)"
"0","  "
"0","  # Convert consensus numeric to factor for plotting"
"0","  pred_data <- pred_data %>%"
"0","    mutate("
"0","      consensus_level = case_when("
"0","        consensus_numeric == 2 ~ ""4:0"","
"0","        consensus_numeric == 1 ~ ""3:1"","
"0","        consensus_numeric == 0 ~ ""2:2"""
"0","      ),"
"0","      consensus_level = factor(consensus_level, levels = c(""2:2"", ""3:1"", ""4:0""))"
"0","    )"
"0","  "
"0","  # Create separate plots for switch and stay"
"0","  plots <- list()"
"0","  "
"0","  for(choice in c(""0"", ""1"")) {"
"0","    plot_data <- pred_data %>% filter(switch_vs_stay == choice)"
"0","    "
"0","    p <- ggplot(plot_data, "
"0","                aes(x = consensus_level, "
"0","                    y = predicted,"
"0","                    color = direction,"
"0","                    linetype = quest_level,"
"0","                    group = interaction(direction, quest_level))) +"
"0","      geom_line() +"
"0","      geom_point(size = 3) +"
"0","      labs(title = paste(""Simple slopes analysis for"", questionnaire_var, "
"0","                        ""\nin"", if(choice == ""0"") ""Stay"" else ""Switch"", ""trials""),"
"0","           x = ""Consensus Level"","
"0","           y = ""Predicted Bet Difference"","
"0","           color = ""Direction"","
"0","           linetype = paste(questionnaire_var, ""Level"")) +"
"0","      scale_color_manual(values = c(""Against group"" = ""red"", ""With group"" = ""blue"")) +"
"0","      theme_custom"
"0","    "
"0","    plots[[choice]] <- p"
"0","  }"
"0","  "
"0","  # Get model summary for slopes"
"0","  model_summary <- summary(model)"
"0","  "
"0","  return(list("
"0","    predictions = pred_data,"
"0","    plots = plots,"
"0","    model_summary = model_summary"
"0","  ))"
"0","}"
"0",""
"0","# Add simple slopes analysis function"
"0","analyze_simple_slopes <- function(model, questionnaire_var) {"
"0","  # Create probe points for the questionnaire variable"
"0","  probe_points <- df %>%"
"0","    summarise("
"0","      low = mean(!!sym(questionnaire_var)) - sd(!!sym(questionnaire_var)),"
"0","      mean = mean(!!sym(questionnaire_var)),"
"0","      high = mean(!!sym(questionnaire_var)) + sd(!!sym(questionnaire_var))"
"0","    )"
"0","  "
"0","  # Create prediction grid"
"0","  pred_data <- expand.grid("
"0","    direction = unique(df$direction),"
"0","    consensus_numeric = unique(df$consensus_numeric),"
"0","    switch_vs_stay = c(0, 1),"
"0","    quest_score = c(probe_points$low, probe_points$mean, probe_points$high)"
"0","  ) %>%"
"0","    mutate("
"0","      quest_level = rep(c(""-1 SD"", ""Mean"", ""+1 SD""), "
"0","                       each = length(unique(df$direction)) * "
"0","                         length(unique(df$consensus_numeric)) * 2),"
"0","      direction = factor(direction),"
"0","      switch_vs_stay = factor(switch_vs_stay)"
"0","    )"
"0","  "
"0","  # Add other necessary variables at their means/reference levels"
"0","  pred_data$age <- 0  # since age is scaled, 0 is the mean"
"0","  "
"0","  # Create column with questionnaire variable name"
"0","  pred_data[[questionnaire_var]] <- pred_data$quest_score"
"0","  "
"0","  # Get predictions"
"0","  pred_data$predicted <- predict(model, newdata = pred_data, re.form = NA)"
"0","  "
"0","  # Convert consensus numeric to factor for plotting"
"0","  pred_data <- pred_data %>%"
"0","    mutate("
"0","      consensus_level = case_when("
"0","        consensus_numeric == 2 ~ ""4:0"","
"0","        consensus_numeric == 1 ~ ""3:1"","
"0","        consensus_numeric == 0 ~ ""2:2"""
"0","      ),"
"0","      consensus_level = factor(consensus_level, levels = c(""2:2"", ""3:1"", ""4:0""))"
"0","    )"
"0","  "
"0","  # Create separate plots for switch and stay"
"0","  plots <- list()"
"0","  "
"0","  for(choice in c(""0"", ""1"")) {"
"0","    plot_data <- pred_data %>% filter(switch_vs_stay == choice)"
"0","    "
"0","    p <- ggplot(plot_data, "
"0","                aes(x = consensus_level, "
"0","                    y = predicted,"
"0","                    color = direction,"
"0","                    linetype = quest_level,"
"0","                    group = interaction(direction, quest_level))) +"
"0","      geom_line() +"
"0","      geom_point(size = 3) +"
"0","      labs(title = paste(""Simple slopes analysis for"", questionnaire_var, "
"0","                        ""\nin"", if(choice == ""0"") ""Stay"" else ""Switch"", ""trials""),"
"0","           x = ""Consensus Level"","
"0","           y = ""Predicted Bet Difference"","
"0","           color = ""Direction"","
"0","           linetype = paste(questionnaire_var, ""Level"")) +"
"0","      scale_color_manual(values = c(""Against group"" = ""red"", ""With group"" = ""blue"")) +"
"0","      theme_custom"
"0","    "
"0","    plots[[choice]] <- p"
"0","  }"
"0","  "
"0","  # Get model summary for slopes"
"0","  model_summary <- summary(model)"
"0","  "
"0","  return(list("
"0","    predictions = pred_data,"
"0","    plots = plots,"
"0","    model_summary = model_summary"
"0","  ))"
"0","}"
"0",""
"0","# Run analyses for questionnaires"
"0","questionnaire_vars <- c(""ssms"", ""dass"", ""lsas"", ""srp_sf"", ""ami"", ""aq_10"")"
"0",""
"0","# Create empty list to store results"
"0","all_results <- list()"
"0",""
"0","# Run models for each questionnaire"
"0","for(var in questionnaire_vars) {"
"0","  result <- run_questionnaire_models(var, df)"
"0","  all_results[[var]] <- tibble("
"0","    questionnaire = result$questionnaire,"
"0","    p_value = result$p_value,"
"0","    p_adjusted = p.adjust(result$p_value, method = ""fdr""),"
"0","    aic = result$aic"
"0","  )"
"0","}"
"1","[1]"
"1"," ""\nRunning models for: ssms"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: dass"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: lsas"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: srp_sf"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: ami"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: aq_10"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"0","# Combine results into a single dataframe"
"0","model_results <- bind_rows(all_results)"
"0",""
"0","# Print results"
"0","print(""Model results for each questionnaire:"")"
"1","[1]"
"1"," ""Model results for each questionnaire:"""
"1","
"
"0","print(model_results %>% "
"0","        select(questionnaire, p_value, p_adjusted) %>%"
"0","        mutate(across(where(is.numeric), ~round(., 3))))"
