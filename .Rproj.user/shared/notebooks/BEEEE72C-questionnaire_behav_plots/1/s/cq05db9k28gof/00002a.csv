"0",""
"0","# Prepare base questionnaire data first"
"0","base_df <- df %>%"
"0","  distinct(participant.id_in_session, .keep_all = TRUE) %>%"
"0","  select(participant.id_in_session, "
"0","         # Main scales"
"0","         ssms, dass, lsas, srp_sf, ami, aq_10,"
"0","         # Subscales"
"0","         lsas_p, lsas_s,"
"0","         dass_a, dass_d, dass_s,"
"0","         ssms_cd, ssms_ia,"
"0","         srp_sf_ipm, srp_sf_ca, srp_sf_els, srp_sf_ct,"
"0","         ami_es, ami_sm, ami_ba,"
"0","         # Demographics"
"0","         age, gender)"
"0",""
"0","# Function to format results text"
"0","format_results <- function(model_results, moderation_results = NULL, outcome_name) {"
"0","  output_text <- sprintf(""ANALYSIS RESULTS FOR %s\n\n"", toupper(outcome_name))"
"0","  "
"0","  # Add timestamp"
"0","  output_text <- paste0(output_text, ""Analysis run on: "", format(Sys.time(), ""%Y-%m-%d %H:%M:%S""), ""\n\n"")"
"0","  "
"0","  # Main results section"
"0","  output_text <- paste0(output_text, ""PRIMARY ANALYSIS RESULTS:\n"","
"0","                       ""================================\n"")"
"0","  "
"0","  # Add main model results"
"0","  for(i in 1:nrow(model_results)) {"
"0","    output_text <- paste0(output_text,"
"0","                         ""\nQuestionnaire: "", model_results$questionnaire[i], ""\n"","
"0","                         ""p-value: "", format.pval(model_results$p_value[i], digits = 3), ""\n"","
"0","                         ""FDR-adjusted p-value: "", format.pval(model_results$p_adjusted[i], digits = 3), ""\n"","
"0","                         ""AIC: "", round(model_results$aic[i], 2), ""\n"","
"0","                         ""Residual normality (p): "", format.pval(model_results$resid_normality[i], digits = 3), ""\n"","
"0","                         ""Model converged: "", model_results$model_converged[i], ""\n"")"
"0","  }"
"0","  "
"0","  if(!is.null(moderation_results)) {"
"0","    output_text <- paste0(output_text, ""\n\nMODERATION ANALYSIS RESULTS:\n"","
"0","                         ""================================\n"")"
"0","    "
"0","    for(scale_name in names(moderation_results)) {"
"0","      results <- moderation_results[[scale_name]]"
"0","      "
"0","      # Print model comparison results"
"0","      if(!is.null(results$model_comparison)) {"
"0","        output_text <- paste0(output_text,"
"0","                            ""\nScale: "", scale_name, ""\n"","
"0","                            ""Model comparison chi-square: "", "
"0","                            round(results$model_comparison$Chisq[2], 3), ""\n"","
"0","                            ""p-value: "", "
"0","                            format.pval(results$model_comparison$`Pr(>Chisq)`[2], digits = 3), ""\n"")"
"0","      }"
"0","      "
"0","      if(!is.null(results$subscales)) {"
"0","        output_text <- paste0(output_text, ""\nSubscale Results:\n"")"
"0","        for(sub_result in results$subscales) {"
"0","          if(!is.null(sub_result)) {"
"0","            output_text <- paste0(output_text,"
"0","                                ""\nSubscale: "", sub_result$scale, ""\n"")"
"0","            if(!is.null(sub_result$model_comparison)) {"
"0","              output_text <- paste0(output_text,"
"0","                                  ""Chi-square: "", "
"0","                                  round(sub_result$model_comparison$Chisq[2], 3), ""\n"","
"0","                                  ""p-value: "", "
"0","                                  format.pval(sub_result$model_comparison$`Pr(>Chisq)`[2], digits = 3), ""\n"")"
"0","            }"
"0","          }"
"0","        }"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  return(output_text)"
"0","}"
"0",""
"0","# Function to create analysis dataframe"
"0","create_analysis_df <- function(df, outcome_var) {"
"0","  analysis_df <- df %>%"
"0","    select("
"0","      participant.id_in_session,"
"0","      group.trial_number,"
"0","      {{outcome_var}},"
"0","      group.reversal_happened"
"0","    ) %>%"
"0","    # Get trials relative to reversal and check for complete windows"
"0","    group_by(participant.id_in_session) %>%"
"0","    mutate("
"0","      # For each trial, get its position relative to the closest reversal"
"0","      trial_to_reversal = map_dbl(group.trial_number, function(x) {"
"0","        reversal_trial <- reversal_trials$group.trial_number"
"0","        relative_pos <- x - reversal_trial"
"0","        if(any(abs(relative_pos) <= 3)) {"
"0","          relative_pos[which.min(abs(relative_pos))]"
"0","        } else {"
"0","          NA"
"0","        }"
"0","      }),"
"0","      # For each trial within a window, check if all 7 trials exist"
"0","      complete_window = map_lgl(group.trial_number, function(x) {"
"0","        reversal_trial <- reversal_trials$group.trial_number"
"0","        rel_pos <- x - reversal_trial"
"0","        if(any(abs(rel_pos) <= 3)) {"
"0","          closest_reversal <- reversal_trial[which.min(abs(rel_pos))]"
"0","          required_trials <- (closest_reversal - 3):(closest_reversal + 3)"
"0","          all(required_trials %in% group.trial_number)"
"0","        } else {"
"0","          FALSE"
"0","        }"
"0","      })"
"0","    ) %>%"
"0","    # Keep only complete windows"
"0","    filter(!is.na(trial_to_reversal) & complete_window) %>%"
"0","    ungroup() %>%"
"0","    # Join with questionnaire data"
"0","    left_join(base_df, by = ""participant.id_in_session"") %>%"
"0","    mutate("
"0","      trial_to_reversal = factor(trial_to_reversal),"
"0","      participant.id_in_session = factor(participant.id_in_session),"
"0","      # Scale questionnaire variables"
"0","      across(c(ssms, dass, lsas, srp_sf, ami, aq_10, age), scale)"
"0","    )"
"0","  "
"0","  return(analysis_df)"
"0","}"
"0",""
"0","# Function to run questionnaire models"
"0","run_questionnaire_models <- function(quest_var, data, outcome_var) {"
"0","  print(paste(""\nRunning models for:"", quest_var))"
"0","  "
"0","  # Run models"
"0","  model1 <- lmer(as.formula(paste(outcome_var, ""~ trial_to_reversal *"", "
"0","                                 quest_var, ""+ age + (1|participant.id_in_session)"")),"
"0","                data = data,"
"0","                control = lmerControl(optimizer = ""bobyqa""))"
"0","  "
"0","  model2 <- lmer(as.formula(paste(outcome_var, ""~ trial_to_reversal *"", "
"0","                                 quest_var, ""+ age + (1|participant.id_in_session) + (1|gender)"")),"
"0","                data = data,"
"0","                control = lmerControl(optimizer = ""bobyqa""))"
"0","  "
"0","  # Get best model"
"0","  models_list <- list(model1, model2)"
"0","  aic_values <- sapply(models_list, AIC)"
"0","  winning_model <- models_list[[which.min(aic_values)]]"
"0","  "
"0","  # Get model statistics"
"0","  model_anova <- car::Anova(winning_model, type = 2)"
"0","  interaction_p <- model_anova[paste0(""trial_to_reversal:"", quest_var), ""Pr(>Chisq)""]"
"0","  "
"0","  # Check model diagnostics"
"0","  diagnostics <- list("
"0","    resid_normality = shapiro.test(residuals(winning_model))$p.value,"
"0","    model_converged = !is.null(winning_model@optinfo$conv$opt)"
"0","  )"
"0","  "
"0","  list("
"0","    questionnaire = quest_var,"
"0","    winning_model = winning_model,"
"0","    p_value = interaction_p,"
"0","    aic = min(aic_values),"
"0","    diagnostics = diagnostics"
"0","  )"
"0","}"
"0",""
"0","# Define subscale mapping"
"0","subscale_mapping <- list("
"0","  lsas = c(""lsas_p"", ""lsas_s""),"
"0","  dass = c(""dass_a"", ""dass_d"", ""dass_s""),"
"0","  ssms = c(""ssms_cd"", ""ssms_ia""),"
"0","  srp_sf = c(""srp_sf_ipm"", ""srp_sf_ca"", ""srp_sf_els"", ""srp_sf_ct""),"
"0","  ami = c(""ami_es"", ""ami_sm"", ""ami_ba""),"
"0","  aq_10 = NULL"
"0",")"
"0",""
"0","# Custom theme"
"0","theme_custom <- theme_minimal() +"
"0","  theme("
"0","    panel.grid.minor = element_blank(),"
"0","    legend.position = ""right"","
"0","    plot.title = element_text(size = 12, face = ""bold""),"
"0","    plot.subtitle = element_text(size = 10),"
"0","    axis.title = element_text(size = 10),"
"0","    legend.title = element_text(size = 10),"
"0","    legend.text = element_text(size = 9)"
"0","  )"
"0",""
"0","# Function to run moderation analysis"
"0","run_moderation_analysis <- function(data, scale_name, subscales, outcome_var) {"
"0","  # Rename scale variable to generic name for modeling"
"0","  mod_data <- data %>%"
"0","    rename(scale_name = !!scale_name)"
"0","  "
"0","  # Run base model"
"0","  base_model <- lmer(as.formula(paste(outcome_var, ""~ trial_to_reversal + age + (1|participant.id_in_session)"")),"
"0","                    data = mod_data,"
"0","                    control = lmerControl(optimizer = ""bobyqa""))"
"0","  "
"0","  # Run model with scale"
"0","  scale_model <- lmer(as.formula(paste(outcome_var, ""~ trial_to_reversal * scale_name + age + (1|participant.id_in_session)"")),"
"0","                     data = mod_data,"
"0","                     control = lmerControl(optimizer = ""bobyqa""))"
"0","  "
"0","  # Compare models"
"0","  model_comparison <- anova(base_model, scale_model)"
"0","  "
"0","  results <- list("
"0","    scale = scale_name,"
"0","    base_model = base_model,"
"0","    model = scale_model,"
"0","    model_comparison = model_comparison"
"0","  )"
"0","  "
"0","  # Run subscale analyses if applicable"
"0","  if(!is.null(subscales)) {"
"0","    subscale_results <- list()"
"0","    for(subscale in subscales) {"
"0","      if(subscale %in% names(mod_data)) {"
"0","        sub_model <- lmer(as.formula(paste(outcome_var, ""~ trial_to_reversal * scale_name * "", "
"0","                                         subscale, ""+ age + (1|participant.id_in_session)"")),"
"0","                         data = mod_data,"
"0","                         control = lmerControl(optimizer = ""bobyqa""))"
"0","        "
"0","        sub_comparison <- anova(scale_model, sub_model)"
"0","        "
"0","        subscale_results[[subscale]] <- list("
"0","          scale = subscale,"
"0","          model = sub_model,"
"0","          model_comparison = sub_comparison"
"0","        )"
"0","      }"
"0","    }"
"0","    results$subscales <- subscale_results"
"0","  }"
"0","  "
"0","  return(results)"
"0","}"
"0",""
"0","# Function to create plots"
"0","create_plots <- function(data, result, outcome_var, is_percentage = FALSE) {"
"0","  var <- result$questionnaire"
"0","  "
"0","  # Continuous relationship plot"
"0","  summary_data <- data %>%"
"0","    group_by(trial_to_reversal, .data[[var]]) %>%"
"0","    summarise("
"0","      mean_outcome = mean(.data[[outcome_var]]),"
"0","      se = sd(.data[[outcome_var]]) / sqrt(n()),"
"0","      .groups = 'drop'"
"0","    )"
"0","  "
"0","  if(is_percentage) {"
"0","    summary_data$mean_outcome <- summary_data$mean_outcome * 100"
"0","    summary_data$se <- summary_data$se * 100"
"0","  }"
"0","  "
"0","  p1 <- ggplot(summary_data, "
"0","               aes(x = .data[[var]], "
"0","                   y = mean_outcome)) +"
"0","    geom_point() +"
"0","    geom_smooth(method = ""lm"") +"
"0","    facet_wrap(~trial_to_reversal) +"
"0","    labs(x = var,"
"0","         y = if(is_percentage) ""Accuracy (%)"" else ""Bet magnitude"","
"0","         title = paste(""Effect of"", var),"
"0","         subtitle = paste(""p ="", format.pval(result$p_value, digits = 3))) +"
"0","    theme_custom"
"0","  "
"0","  print(p1)"
"0","  "
"0","  # Median-split plot"
"0","  summary_data_split <- data %>%"
"0","    mutate("
"0","      quest_group = ifelse(.data[[var]] > median(.data[[var]]), ""High"", ""Low"")"
"0","    ) %>%"
"0","    group_by(trial_to_reversal, quest_group) %>%"
"0","    summarise("
"0","      mean_outcome = mean(.data[[outcome_var]]),"
"0","      se = sd(.data[[outcome_var]]) / sqrt(n()),"
"0","      .groups = 'drop'"
"0","    )"
"0","  "
"0","  if(is_percentage) {"
"0","    summary_data_split$mean_outcome <- summary_data_split$mean_outcome * 100"
"0","    summary_data_split$se <- summary_data_split$se * 100"
"0","  }"
"0","  "
"0","  p2 <- ggplot(summary_data_split, "
"0","               aes(x = trial_to_reversal, "
"0","                   y = mean_outcome, "
"0","                   color = quest_group,"
"0","                   group = quest_group)) +"
"0","    geom_line() +"
"0","    geom_point() +"
"0","    geom_errorbar(aes(ymin = mean_outcome - se, "
"0","                      ymax = mean_outcome + se), "
"0","                  width = 0.2) +"
"0","    labs(x = ""Trial relative to reversal"","
"0","         y = if(is_percentage) ""Accuracy (%)"" else ""Bet magnitude"","
"0","         title = paste(""Effect of"", var, ""(Median-split)""),"
"0","         subtitle = paste(""p ="", format.pval(result$p_value, digits = 3))) +"
"0","    theme_custom"
"0","  "
"0","  print(p2)"
"0","}"
"0",""
"0","# Function to create moderation plot"
"0","create_moderation_plot <- function(model, title, outcome_var, is_percentage = FALSE) {"
"0","  # Create prediction grid"
"0","  pred_data <- expand.grid("
"0","    trial_to_reversal = unique(model@frame$trial_to_reversal),"
"0","    scale_name = c(-1, 0, 1)  # -1 SD, Mean, +1 SD"
"0","  )"
"0","  pred_data$age <- 0  # Set age to mean (0 after scaling)"
"0","  "
"0","  # Get predictions"
"0","  pred_data$predicted <- predict(model, newdata = pred_data, re.form = NA)"
"0","  if(is_percentage) pred_data$predicted <- pred_data$predicted * 100"
"0","  "
"0","  # Create plot"
"0","  p <- ggplot(pred_data, "
"0","              aes(x = trial_to_reversal, "
"0","                  y = predicted, "
"0","                  color = factor(scale_name, "
"0","                               labels = c(""-1 SD"", ""Mean"", ""+1 SD"")),"
"0","                  group = scale_name)) +"
"0","    geom_line() +"
"0","    geom_point() +"
"0","    labs(x = ""Trial relative to reversal"","
"0","         y = if(is_percentage) ""Accuracy (%)"" else ""Bet magnitude"","
"0","         color = ""Scale Score"","
"0","         title = title) +"
"0","    theme_custom"
"0","  "
"0","  print(p)"
"0","}"
"0",""
"0","# Function to create moderation plots for subscales"
"0","create_subscale_moderation_plot <- function(model, subscale, title, outcome_var, is_percentage = FALSE) {"
"0","  # Create prediction grid"
"0","  pred_data <- expand.grid("
"0","    trial_to_reversal = unique(model@frame$trial_to_reversal),"
"0","    scale_name = 0,  # Hold main scale at mean"
"0","    subscale = c(-1, 0, 1)  # -1 SD, Mean, +1 SD of subscale"
"0","  )"
"0","  pred_data$age <- 0  # Set age to mean"
"0","  "
"0","  # Get predictions"
"0","  pred_data$predicted <- predict(model, newdata = pred_data, re.form = NA)"
"0","  if(is_percentage) pred_data$predicted <- pred_data$predicted * 100"
"0","  "
"0","  # Create plot"
"0","  p <- ggplot(pred_data, "
"0","              aes(x = trial_to_reversal, "
"0","                  y = predicted, "
"0","                  color = factor(subscale, "
"0","                               labels = c(""-1 SD"", ""Mean"", ""+1 SD"")),"
"0","                  group = subscale)) +"
"0","    geom_line() +"
"0","    geom_point() +"
"0","    labs(x = ""Trial relative to reversal"","
"0","         y = if(is_percentage) ""Accuracy (%)"" else ""Bet magnitude"","
"0","         color = ""Subscale Score"","
"0","         title = title) +"
"0","    theme_custom"
"0","  "
"0","  print(p)"
"0","}"
"0",""
"0","# Main analysis function"
"0","run_analysis <- function(outcome_var, is_percentage = FALSE, output_filename) {"
"0","  # Create analysis dataset"
"0","  analysis_df <- create_analysis_df(df, outcome_var)"
"0","  "
"0","  # Run questionnaire models"
"0","  questionnaire_vars <- c(""ssms"", ""dass"", ""lsas"", ""srp_sf"", ""ami"", ""aq_10"")"
"0","  all_results <- list()"
"0","  "
"0","  for(var in questionnaire_vars) {"
"0","    result <- run_questionnaire_models(var, analysis_df, outcome_var)"
"0","    all_results[[var]] <- tibble("
"0","      questionnaire = result$questionnaire,"
"0","      p_value = result$p_value,"
"0","      p_adjusted = p.adjust(result$p_value, method = ""fdr""),"
"0","      aic = result$aic,"
"0","      resid_normality = result$diagnostics$resid_normality,"
"0","      model_converged = result$diagnostics$model_converged"
"0","    )"
"0","  }"
"0","  "
"0","  model_results <- bind_rows(all_results)"
"0","  "
"0","  # Process significant results"
"0","  significant_results <- model_results %>%"
"0","    filter(p_adjusted < SIGNIFICANCE_THRESHOLD)"
"0","  "
"0","  # Run moderation analyses and create plots for significant results"
"0","  moderation_results <- list()"
"0","  "
"0","  if(nrow(significant_results) > 0) {"
"0","    for(i in 1:nrow(significant_results)) {"
"0","      var <- significant_results$questionnaire[i]"
"0","      "
"0","      # Create plots"
"0","      create_plots(analysis_df, "
"0","                  list(questionnaire = var, "
"0","                       p_value = significant_results$p_value[i]), "
"0","                  outcome_var, "
"0","                  is_percentage)"
"0","      "
"0","      # Run moderation analysis if subscales exist"
"0","      if(var %in% names(subscale_mapping)) {"
"0","        subscales <- subscale_mapping[[var]]"
"0","        moderation_results[[var]] <- run_moderation_analysis("
"0","          analysis_df, "
"0","          var, "
"0","          subscales,"
"0","          outcome_var"
"0","        )"
"0","        "
"0","        # Plot main scale moderation"
"0","        main_model <- moderation_results[[var]]$model"
"0","        create_moderation_plot("
"0","          main_model,"
"0","          paste(""Moderation Effect of"", var),"
"0","          outcome_var,"
"0","          is_percentage"
"0","        )"
"0","        "
"0","        # Plot subscale moderations if significant"
"0","        if(!is.null(moderation_results[[var]]$subscales)) {"
"0","          for(sub_result in moderation_results[[var]]$subscales) {"
"0","            if(!is.null(sub_result$model_comparison)) {"
"0","              if(sub_result$model_comparison$`Pr(>Chisq)`[2] < SIGNIFICANCE_THRESHOLD) {"
"0","                create_subscale_moderation_plot("
"0","                  sub_result$model,"
"0","                  sub_result$scale,"
"0","                  paste(""Moderation Effect of"", sub_result$scale),"
"0","                  outcome_var,"
"0","                  is_percentage"
"0","                )"
"0","              }"
"0","            }"
"0","          }"
"0","        }"
"0","      }"
"0","    }"
"0","  } else {"
"0","    print(""No significant relationships found after multiple comparison correction"")"
"0","  }"
"0","  "
"0","  # Format and save results"
"0","  results_text <- format_results("
"0","    model_results, "
"0","    if(length(moderation_results) > 0) moderation_results else NULL,"
"0","    outcome_var"
"0","  )"
"0","  "
"0","  # Create output directory if it doesn't exist"
"0","  dir.create(here(""output"", ""behav""), showWarnings = FALSE, recursive = TRUE)"
"0","  "
"0","  # Save results"
"0","  writeLines(results_text, here(""output"", ""behav"", paste0(output_filename, "".txt"")))"
"0","  "
"0","  # Return results"
"0","  list("
"0","    model_results = model_results,"
"0","    moderation_results = moderation_results"
"0","  )"
"0","}"
"0",""
"0","# Run analyses for both outcomes with specific filenames"
"0","accuracy_results <- run_analysis("
"0","  outcome_var = ""player.choice1_accuracy"","
"0","  is_percentage = TRUE,"
"0","  output_filename = ""choice_accuracy_by_trial_reversal"""
"0",")"
"1","[1]"
"1"," ""\nRunning models for: ssms"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: dass"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: lsas"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: srp_sf"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: ami"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: aq_10"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""No significant relationships found after multiple comparison correction"""
"1","
"
"0","bet_results <- run_analysis("
"0","  outcome_var = ""player.bet1"","
"0","  is_percentage = FALSE,"
"0","  output_filename = ""bet_magnitude_by_trial_reversal"""
"0",")"
"1","[1]"
"1"," ""\nRunning models for: ssms"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: dass"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: lsas"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: srp_sf"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: ami"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
"1","[1]"
"1"," ""\nRunning models for: aq_10"""
"1","
"
"2","boundary (singular) fit: see help('isSingular')
"
