mutate(
scale_name = as.numeric(scale(.data[[questionnaire_var]])),  # Ensure numeric vector
age = as.numeric(scale(age)),
gender = factor(gender)
)
print("Scale name values:")
print(summary(scaled_data$scale_name))
# Scale subscales if they exist
if (!is.null(subscales)) {
for (subscale in subscales) {
scaled_data[[subscale]] <- scale(scaled_data[[subscale]])
}
}
print(paste("Number of rows in output data:", nrow(scaled_data)))
print(paste("Columns in output data:", paste(colnames(scaled_data), collapse=", ")))
return(scaled_data)
}
################## MODEL FORMULAS ###################
# Define the model formulas once to use for both analyses
consensus_model_formulas <- list(
# Main effects only - simplest model
m1 = list(
formula = outcome_value ~ consensus_level + direction + scale_name +
age + (1|participant.id_in_session),
description = "Main effects only (consensus_level + direction + scale_name + age)"
),
# Two-way interactions
m2 = list(
formula = outcome_value ~ (consensus_level + direction + scale_name)^2 +
age + (1|participant.id_in_session),
description = "Two-way interactions ((consensus_level + direction + scale_name)^2)"
),
# Three-way interaction with basic random structure
m3 = list(
formula = outcome_value ~ consensus_level * direction * scale_name +
age + (1|participant.id_in_session),
description = "Three-way interaction with basic random structure"
),
# Adding random slope for consensus
m4 = list(
formula = outcome_value ~ consensus_level * direction * scale_name +
age + (1 + consensus_level|participant.id_in_session),
description = "m3 with added random slope for consensus"
),
# Adding gender random effect
m5 = list(
formula = outcome_value ~ consensus_level * direction * scale_name +
age + (1 + consensus_level|participant.id_in_session) +
(1|gender),
description = "m4 with added gender random effect"
)
)
# Common questionnaire variables and subscale mappings
questionnaire_vars <- c("ssms", "dass", "lsas", "srp_sf", "ami", "aq_10")
subscale_mapping <- list(
lsas = c("lsas_p", "lsas_s"),
dass = c("dass_a", "dass_d", "dass_s"),
ssms = c("ssms_cd", "ssms_ia"),
srp_sf = c("srp_sf_ipm", "srp_sf_ca", "srp_sf_els", "srp_sf_ct"),
ami = c("ami_es", "ami_sm", "ami_ba"),
aq_10 = NULL
)
# Define parameters for switch analysis
switch_params <- list(
preprocessing_fn = function(data, var) {
preprocess_consensus_data(data, "switch", var, FALSE, switch_params)
},
model_formulas = consensus_model_formulas,
questionnaire_vars = questionnaire_vars,
analysis_name = "Choice Switch by Group Consensus",
y_label = "Choice switch probability (%)",
is_percentage = TRUE,
plot_fn = plot_consensus_results,
subscale_mapping = subscale_mapping
)
# Define parameters for bet analysis
bet_params <- list(
preprocessing_fn = function(data, var) {
preprocess_consensus_data(data, "bet", var, FALSE, bet_params)
},
model_formulas = consensus_model_formulas,
questionnaire_vars = questionnaire_vars,
analysis_name = "Bet Difference by Group Consensus",
y_label = "Bet difference (Bet 2 - Bet 1)",
is_percentage = FALSE,
plot_fn = plot_consensus_results,
subscale_mapping = subscale_mapping
)
################## RUN ANALYSES AND SAVE OUTPUT ###################
# Read data
data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"),
show_col_types = FALSE)
# Define analysis-specific base directory name
base_dir <- "ch_switch_and_bet_mag_by_consensus"
# Create main output directories
plot_base_dir <- here("output", "behav", "questionnaire", "plots", base_dir)
txt_base_dir <- here("output", "behav", "questionnaire", "txt", base_dir)
# Create analysis-specific directories for plots
for(analysis in ANALYSIS_TYPES) {
for(plot_type in PLOT_TYPES) {
dir.create(file.path(plot_base_dir, analysis, plot_type),
recursive = TRUE,
showWarnings = FALSE)
}
}
# Create txt directory
dir.create(txt_base_dir, recursive = TRUE, showWarnings = FALSE)
# Run switch analysis
switch_results <- run_model_pipeline(
data = data,
params = switch_params,
output_path = file.path(txt_base_dir, "choice_switching_by_group_consensus.txt")
)
# Run bet analysis
bet_results <- run_model_pipeline(
data = data,
params = bet_params,
output_path = file.path(txt_base_dir, "bet_difference_by_group_consensus.txt")
)
# Save plots for both analyses using the centralized function
save_analysis_plots(switch_results, "choice_switch", plot_base_dir)
save_analysis_plots(bet_results, "bet_magnitude", plot_base_dir)
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
rm(list=ls())
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
getwd()
data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"),
show_col_types = FALSE)
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
# Check working directory
getwd()
# Check if files exist
file.exists(here("data", "preprocessed", "merged_test_data.csv"))
file.exists(here("R", "questionnaire_mixed_models.R"))
rm(list=ls())
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
print("Libraries loaded successfully")
# Source the core pipeline functions
print("Attempting to source R script...")
source(here("R", "questionnaire_mixed_models.R"))
print("R script sourced successfully")
################## SPECIFIC PREPROCESSING ###################
print("Starting preprocessing...")
# Try loading the data
print("Attempting to load data...")
data <- try(read_csv(here("data", "preprocessed", "merged_test_data.csv"),
show_col_types = FALSE))
print("Data loading attempt completed")
# Check if data loaded successfully
if(!inherits(data, "try-error")) {
print("Data loaded successfully")
print(paste("Dimensions:", paste(dim(data), collapse = " x ")))
print("First few column names:")
print(head(names(data)))
} else {
print("Error loading data:")
print(data)
}
test_data <- read_csv(here("data", "preprocessed", "merged_test_data.csv"),
show_col_types = FALSE)
dim(test_data)
rm(list=ls())
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
rm(list=ls())
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
rm(list=ls())
# Install packages only if they are not already installed
required_packages <- c("ggplot2", "tidyverse", "ggpubr", "rstatix", "ez", "lme4", "lmerTest", "car", "emmeans", "MuMIn", "psych", "interactions", "effects", "here", "lm.beta", "effectsize", "parallel")
install_if_missing <- required_packages[!required_packages %in% installed.packages()]
if (length(install_if_missing) > 0) {
install.packages(install_if_missing, quietly = TRUE)
}
# Load libraries
library(ggplot2)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(ez)
library(lme4)
library(car)
library(readr)
library(lmerTest)
library(emmeans)
library(MuMIn)
library(corrplot)
library(reshape2)
library(psych)
library(interactions)
library(effects)
library(here)
library(conflicted)
library(lm.beta)
library(effectsize)
library(parallel)
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflicts_prefer(lmerTest::lmer)
conflicts_prefer(effectsize::eta_squared)
